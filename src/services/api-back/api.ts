/* tslint:disable */
/* eslint-disable */
/**
 * TCC API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ComicCreateDto
 */
export interface ComicCreateDto {
    /**
     * comic title
     * @type {string}
     * @memberof ComicCreateDto
     */
    'title': string;
    /**
     * comic sinopse
     * @type {string}
     * @memberof ComicCreateDto
     */
    'sinopse': string;
    /**
     * comic cover photo
     * @type {string}
     * @memberof ComicCreateDto
     */
    'coverPhoto': string;
    /**
     * comic cover photo
     * @type {string}
     * @memberof ComicCreateDto
     */
    'bannerPhoto': string;
    /**
     * 
     * @type {Array<ComicCreateDtoPagesInner>}
     * @memberof ComicCreateDto
     */
    'pages': Array<ComicCreateDtoPagesInner>;
}
/**
 * 
 * @export
 * @interface ComicCreateDtoPagesInner
 */
export interface ComicCreateDtoPagesInner {
    /**
     * 
     * @type {string}
     * @memberof ComicCreateDtoPagesInner
     */
    'pagePhoto': string;
    /**
     * 
     * @type {number}
     * @memberof ComicCreateDtoPagesInner
     */
    'pageNumber': number;
}
/**
 * 
 * @export
 * @interface UserCreateDto
 */
export interface UserCreateDto {
    /**
     * User name
     * @type {string}
     * @memberof UserCreateDto
     */
    'username': string;
    /**
     * User email
     * @type {string}
     * @memberof UserCreateDto
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof UserCreateDto
     */
    'password': string;
    /**
     * User profile photo
     * @type {string}
     * @memberof UserCreateDto
     */
    'profilePhoto': string;
    /**
     * User banner photo
     * @type {string}
     * @memberof UserCreateDto
     */
    'bannerPhoto': string;
    /**
     * User age
     * @type {number}
     * @memberof UserCreateDto
     */
    'age': number;
    /**
     * User genrer
     * @type {string}
     * @memberof UserCreateDto
     */
    'genrer': UserCreateDtoGenrerEnum;
    /**
     * User about
     * @type {string}
     * @memberof UserCreateDto
     */
    'about': string;
}

export const UserCreateDtoGenrerEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Undefined: 'UNDEFINED'
} as const;

export type UserCreateDtoGenrerEnum = typeof UserCreateDtoGenrerEnum[keyof typeof UserCreateDtoGenrerEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} userPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (username: string, userPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('authControllerLogin', 'username', username)
            // verify required parameter 'userPassword' is not null or undefined
            assertParamExists('authControllerLogin', 'userPassword', userPassword)
            const localVarPath = `/auth/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['userPassword'] = userPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} userPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(username: string, userPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(username, userPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} userPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(username: string, userPassword: string, options?: any): AxiosPromise<string> {
            return localVarFp.authControllerLogin(username, userPassword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} userPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(username: string, userPassword: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(username, userPassword, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ComicApi - axios parameter creator
 * @export
 */
export const ComicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerComicHome: async (comicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'comicId' is not null or undefined
            assertParamExists('comicControllerComicHome', 'comicId', comicId)
            const localVarPath = `/comic/comic-home/{comicId}`
                .replace(`{${"comicId"}}`, encodeURIComponent(String(comicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerComicRead: async (comicId: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'comicId' is not null or undefined
            assertParamExists('comicControllerComicRead', 'comicId', comicId)
            const localVarPath = `/comic/comic-read/{comicId}`
                .replace(`{${"comicId"}}`, encodeURIComponent(String(comicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new comic
         * @param {ComicCreateDto} comicCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerCreate: async (comicCreateDto: ComicCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'comicCreateDto' is not null or undefined
            assertParamExists('comicControllerCreate', 'comicCreateDto', comicCreateDto)
            const localVarPath = `/comic/create-comic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(comicCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerFindAllHome: async (page: string, perPage: string, title?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('comicControllerFindAllHome', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('comicControllerFindAllHome', 'perPage', perPage)
            const localVarPath = `/comic/find-all-home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComicApi - functional programming interface
 * @export
 */
export const ComicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comicControllerComicHome(comicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comicControllerComicHome(comicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComicApi.comicControllerComicHome']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comicControllerComicRead(comicId: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comicControllerComicRead(comicId, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComicApi.comicControllerComicRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new comic
         * @param {ComicCreateDto} comicCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comicControllerCreate(comicCreateDto: ComicCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comicControllerCreate(comicCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComicApi.comicControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comicControllerFindAllHome(page: string, perPage: string, title?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comicControllerFindAllHome(page, perPage, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComicApi.comicControllerFindAllHome']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ComicApi - factory interface
 * @export
 */
export const ComicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComicApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerComicHome(comicId: string, options?: any): AxiosPromise<void> {
            return localVarFp.comicControllerComicHome(comicId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} comicId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerComicRead(comicId: string, page?: number, options?: any): AxiosPromise<void> {
            return localVarFp.comicControllerComicRead(comicId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new comic
         * @param {ComicCreateDto} comicCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerCreate(comicCreateDto: ComicCreateDto, options?: any): AxiosPromise<void> {
            return localVarFp.comicControllerCreate(comicCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all comics home
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comicControllerFindAllHome(page: string, perPage: string, title?: string, options?: any): AxiosPromise<void> {
            return localVarFp.comicControllerFindAllHome(page, perPage, title, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComicApi - object-oriented interface
 * @export
 * @class ComicApi
 * @extends {BaseAPI}
 */
export class ComicApi extends BaseAPI {
    /**
     * 
     * @summary Get all comics home
     * @param {string} comicId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComicApi
     */
    public comicControllerComicHome(comicId: string, options?: RawAxiosRequestConfig) {
        return ComicApiFp(this.configuration).comicControllerComicHome(comicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all comics home
     * @param {string} comicId 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComicApi
     */
    public comicControllerComicRead(comicId: string, page?: number, options?: RawAxiosRequestConfig) {
        return ComicApiFp(this.configuration).comicControllerComicRead(comicId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new comic
     * @param {ComicCreateDto} comicCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComicApi
     */
    public comicControllerCreate(comicCreateDto: ComicCreateDto, options?: RawAxiosRequestConfig) {
        return ComicApiFp(this.configuration).comicControllerCreate(comicCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all comics home
     * @param {string} page 
     * @param {string} perPage 
     * @param {string} [title] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComicApi
     */
    public comicControllerFindAllHome(page: string, perPage: string, title?: string, options?: RawAxiosRequestConfig) {
        return ComicApiFp(this.configuration).comicControllerFindAllHome(page, perPage, title, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Subscribe a new user
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSubscribe: async (userCreateDto: UserCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateDto' is not null or undefined
            assertParamExists('userControllerSubscribe', 'userCreateDto', userCreateDto)
            const localVarPath = `/user/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Subscribe a new user
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerSubscribe(userCreateDto: UserCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerSubscribe(userCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerSubscribe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Subscribe a new user
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSubscribe(userCreateDto: UserCreateDto, options?: any): AxiosPromise<void> {
            return localVarFp.userControllerSubscribe(userCreateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Subscribe a new user
     * @param {UserCreateDto} userCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerSubscribe(userCreateDto: UserCreateDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerSubscribe(userCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



